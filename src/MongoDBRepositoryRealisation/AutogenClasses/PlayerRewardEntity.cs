using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using CompetitiveBackend.Core.Objects;

/**
* Generated by MongoDB Relational Migrator
* https://www.mongodb.com/products/relational-migrator
* Collection: playerReward
* Language: C#
* Template: Persistence Layer
* Generated on 2025-05-20
*/
namespace Model {

  /// <summary>
  /// 
  /// </summary>
    public class PlayerRewardEntity {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [BsonElement("_id")]
        [BsonId]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RewardDescriptionId
        /// </summary>
        [BsonElement("rewardDescriptionId")]
        public int RewardDescriptionId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [BsonElement("playerId")]
        public int PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets CompetitionId
        /// </summary>
        [BsonElement("competitionId")]
        public int? CompetitionId { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [BsonElement("creationDate")]
        public DateTime CreationDate { get; set; }


        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()  {
            var sb = new StringBuilder();
            sb.Append("class PlayerRewardEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardDescriptionId: ").Append(RewardDescriptionId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  CompetitionId: ").Append(CompetitionId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
            public PlayerRewardEntity(int id, PlayerReward reward)
            {
                Id = id;
                RewardDescriptionId = reward.RewardDescriptionID;
                CompetitionId = reward.CompetitionSource;
                PlayerId = reward.PlayerID;
                CreationDate = reward.RewardDate ?? DateTime.UtcNow;
            }
        public PlayerRewardEntity(int id, int rewardDescrID, int CompetitionID, int PlayerID, DateTime? CreationDate = null)
        {
            Id = id;
            RewardDescriptionId = rewardDescrID;
            CompetitionId = CompetitionID;
            PlayerId = PlayerID;
            this.CreationDate = CreationDate ?? DateTime.UtcNow;
        }

        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() {
            return this.ToJson<PlayerRewardEntity>();
        }
    }
    public static class PlayerRewardEntityConvertExtensions
    {
        public static PlayerReward Convert(this PlayerRewardEntity entit, RewardDescriptionEntity descrEntity)
        {
            return new PlayerReward(entit.PlayerId, entit.RewardDescriptionId, descrEntity.RewardName, 
                descrEntity.Description, entit.CompetitionId, entit.CreationDate, entit.Id);
        }
    }
}
