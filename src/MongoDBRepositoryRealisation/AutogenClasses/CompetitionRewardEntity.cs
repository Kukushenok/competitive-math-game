using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using CompetitiveBackend.Core.Objects;
using CompetitiveBackend.Core.RewardCondition;
using System.Runtime.ConstrainedExecution;

/**
* Generated by MongoDB Relational Migrator
* https://www.mongodb.com/products/relational-migrator
* Collection: competitionReward
* Language: C#
* Template: Persistence Layer
* Generated on 2025-05-20
*/
namespace Model {

    /// <summary>
    /// 
    /// </summary>
    /// 
    [BsonDiscriminator(RootClass = true)]
    [BsonKnownTypes(typeof(PlaceGrantConditionEntity), typeof(RankGrantConditionEntity))]
    public abstract class CompetitionGrantConditionEntity
    {
        public abstract GrantCondition Converted { get; }
        public static CompetitionGrantConditionEntity Convert(GrantCondition cnd)
        {
            if (cnd is RankGrantCondition rnk) return new RankGrantConditionEntity(rnk.minRank, rnk.maxRank);
            else if (cnd is PlaceGrantCondition plc) return new PlaceGrantConditionEntity(plc.minPlace, plc.maxPlace);
            else throw new NotSupportedException("Not supported grant condition");
        }
    }
    public class PlaceGrantConditionEntity: CompetitionGrantConditionEntity
    {
        public PlaceGrantConditionEntity(int minPlace, int maxPlace)
        {
            this.minPlace = minPlace;
            this.maxPlace = maxPlace;
        }

        [BsonElement("minPlace")]
        public int minPlace { get; set; }
        [BsonElement("maxPlace")]
        public int maxPlace { get; set; }
        public override GrantCondition Converted { get => new PlaceGrantCondition(minPlace, maxPlace); }
    }
    public class RankGrantConditionEntity: CompetitionGrantConditionEntity
    {
        public RankGrantConditionEntity(float minRank, float maxRank)
        {
            this.minRank = minRank;
            this.maxRank = maxRank;
        }

        [BsonElement("minRank")]
        public float minRank { get; set; }
        [BsonElement("maxRank")]
        public float maxRank { get; set; }
        public override GrantCondition Converted { get => new RankGrantCondition(minRank, maxRank); }
    }

    public class CompetitionRewardEntity {

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [BsonElement("_id")]
        [BsonId]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RewardDescriptionId
        /// </summary>
        [BsonElement("rewardDescriptionId")]
        public int RewardDescriptionId { get; set; }

        /// <summary>
        /// Gets or Sets CompetitionId
        /// </summary>
        [BsonElement("competitionId")]
        public int CompetitionId { get; set; }

        /// <summary>
        /// Gets or Sets MinPlace
        /// </summary>
        [BsonElement("condition")]
        public CompetitionGrantConditionEntity CompetitionCondition { get; set; }

        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()  {
            var sb = new StringBuilder();
            sb.Append("class CompetitionRewardEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardDescriptionId: ").Append(RewardDescriptionId).Append("\n");
            sb.Append("  CompetitionId: ").Append(CompetitionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() {
            return this.ToJson<CompetitionRewardEntity>();
        }
    }
    public static class CompetitionRewardEntityConverter
    {
        public static CompetitionReward Convert(this CompetitionRewardEntity ent, RewardDescriptionEntity descrEntity)
        {
            return new CompetitionReward(ent.RewardDescriptionId, ent.CompetitionId, descrEntity.RewardName, descrEntity.Description,
                ent.CompetitionCondition.Converted, ent.Id);
        }
        public static CompetitionRewardEntity Convert(this CompetitionReward reward)
        {
            return new CompetitionRewardEntity()
            {
                Id = reward.Id ?? 0,
                CompetitionCondition = CompetitionGrantConditionEntity.Convert(reward.Condition),
                CompetitionId = reward.CompetitionID,
                RewardDescriptionId = reward.RewardDescriptionID
            };
        }
    }
}
