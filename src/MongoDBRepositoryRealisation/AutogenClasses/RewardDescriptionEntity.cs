using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using CompetitiveBackend.Core.Objects;

/**
* Generated by MongoDB Relational Migrator
* https://www.mongodb.com/products/relational-migrator
* Collection: rewardDescription
* Language: C#
* Template: Persistence Layer
* Generated on 2025-05-20
*/
namespace Model {

  /// <summary>
  /// 
  /// </summary>
    public class RewardDescriptionEntity {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [BsonElement("_id")]
        [BsonId]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RewardName
        /// </summary>
        [BsonElement("rewardName")]
        public string RewardName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [BsonElement("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IconImage
        /// </summary>
        [BsonElement("iconImage")]
        public byte[] IconImage { get; set; }

        /// <summary>
        /// Gets or Sets IngameData
        /// </summary>
        [BsonElement("ingameData")]
        public byte[] IngameData { get; set; }


        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()  {
            var sb = new StringBuilder();
            sb.Append("class RewardDescriptionEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RewardName: ").Append(RewardName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconImage: ").Append(IconImage).Append("\n");
            sb.Append("  IngameData: ").Append(IngameData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() {
            return this.ToJson<RewardDescriptionEntity>();
        }
        public RewardDescriptionEntity(int id, RewardDescription descr)
        {
            Id = id;
            RewardName = descr.Name;
            Description = descr.Description;
            IconImage = IngameData = Array.Empty<byte>();
        }
    }
    public static class RewardDescriptionConvertExtensions
    {
        public static RewardDescription Convert(this RewardDescriptionEntity entity) => new RewardDescription(entity.RewardName, entity.Description, entity.Id);
    }
}
