using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using CompetitiveBackend.Core.Objects;
using CompetitiveBackend.Core.Auth;

/**
* Generated by MongoDB Relational Migrator
* https://www.mongodb.com/products/relational-migrator
* Collection: account
* Language: C#
* Template: Persistence Layer
* Generated on 2025-05-20
*/
namespace Model {

    /// <summary>
    /// 
    /// </summary>
    public class AccountEntity {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [BsonElement("_id")]
        [BsonId]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [BsonElement("login")]
        public string Login { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [BsonElement("username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [BsonElement("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [BsonElement("passwordHash")]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets PrivilegyLevel
        /// </summary>
        [BsonElement("privilegyName")]
        public string PrivilegyName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [BsonElement("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImage
        /// </summary>
        [BsonElement("profileImage")]
        public byte[] ProfileImage { get; set; }

        public AccountEntity(int id, Account acc, Role role, string passwordHash)
        {
            Id = id;
            Login = Username = acc.Login;
            Email = acc.Email;
            PasswordHash = passwordHash;
            PrivilegyName = role.ToString();
        }
        /// <summary>
        /// Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()  {
            var sb = new StringBuilder();
            sb.Append("class AccountEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  PrivilegyName: ").Append(PrivilegyName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Get the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson() {
            return this.ToJson<AccountEntity>();
        }
    
    }
    public static class AccountConverter
    {
        public static Account ConvertToAccount(this AccountEntity ent) => new Account(ent.Login, ent.Email, ent.Id);
        public static PlayerProfile ConvertToProfile(this AccountEntity ent) => new PlayerProfile(ent.Username, ent.Description, ent.Id);
    }
}
