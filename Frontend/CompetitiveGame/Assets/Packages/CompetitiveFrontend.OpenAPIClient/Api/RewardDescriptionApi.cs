/*
 * CompetitiveBackend
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CompetitiveFrontend.OpenAPIClient.Client;
using CompetitiveFrontend.OpenAPIClient.Model;

namespace CompetitiveFrontend.OpenAPIClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardDescriptionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsGet(int? page = default(int?), int? count = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsGetWithHttpInfo(int? page = default(int?), int? count = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsIdAssetGet(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsIdAssetGetWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsIdAssetPatch(int id, System.IO.Stream? file = default(System.IO.Stream?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsIdAssetPatchWithHttpInfo(int id, System.IO.Stream? file = default(System.IO.Stream?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO ApiV1RewardDescriptionsIdGet(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsIdGetWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsIdImageGet(int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsIdImageGetWithHttpInfo(int id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsIdImagePatch(int id, System.IO.Stream? file = default(System.IO.Stream?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsIdImagePatchWithHttpInfo(int id, System.IO.Stream? file = default(System.IO.Stream?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsIdPatch(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsIdPatchWithHttpInfo(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns></returns>
        void ApiV1RewardDescriptionsPut(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RewardDescriptionsPutWithHttpInfo(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardDescriptionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsGetAsync(int? page = default(int?), int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>>> ApiV1RewardDescriptionsGetWithHttpInfoAsync(int? page = default(int?), int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsIdAssetGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsIdAssetGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsIdAssetPatchAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsIdAssetPatchWithHttpInfoAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        System.Threading.Tasks.Task<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsIdImageGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsIdImageGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsIdImagePatchAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsIdImagePatchWithHttpInfoAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsIdPatchAsync(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsIdPatchWithHttpInfoAsync(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RewardDescriptionsPutAsync(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RewardDescriptionsPutWithHttpInfoAsync(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardDescriptionApi : IRewardDescriptionApiSync, IRewardDescriptionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RewardDescriptionApi : IDisposable, IRewardDescriptionApi
    {
        private CompetitiveFrontend.OpenAPIClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDescriptionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public RewardDescriptionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDescriptionApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public RewardDescriptionApi(string basePath)
        {
            this.Configuration = CompetitiveFrontend.OpenAPIClient.Client.Configuration.MergeConfigurations(
                CompetitiveFrontend.OpenAPIClient.Client.GlobalConfiguration.Instance,
                new CompetitiveFrontend.OpenAPIClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new CompetitiveFrontend.OpenAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = CompetitiveFrontend.OpenAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDescriptionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public RewardDescriptionApi(CompetitiveFrontend.OpenAPIClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CompetitiveFrontend.OpenAPIClient.Client.Configuration.MergeConfigurations(
                CompetitiveFrontend.OpenAPIClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new CompetitiveFrontend.OpenAPIClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = CompetitiveFrontend.OpenAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDescriptionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public RewardDescriptionApi(CompetitiveFrontend.OpenAPIClient.Client.ISynchronousClient client, CompetitiveFrontend.OpenAPIClient.Client.IAsynchronousClient asyncClient, CompetitiveFrontend.OpenAPIClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CompetitiveFrontend.OpenAPIClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CompetitiveFrontend.OpenAPIClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CompetitiveFrontend.OpenAPIClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CompetitiveFrontend.OpenAPIClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CompetitiveFrontend.OpenAPIClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        public List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsGet(int? page = default(int?), int? count = default(int?))
        {
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> localVarResponse = ApiV1RewardDescriptionsGetWithHttpInfo(page, count);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsGetWithHttpInfo(int? page = default(int?), int? count = default(int?))
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>>("/api/v1/reward_descriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsGetAsync(int? page = default(int?), int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsGetWithHttpInfoAsync(page, count, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> localVarResponse = await task.ConfigureAwait(false);
#else
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="count"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>>> ApiV1RewardDescriptionsGetWithHttpInfoAsync(int? page = default(int?), int? count = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<List<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>>("/api/v1/reward_descriptions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsIdAssetGet(int id)
        {
            ApiV1RewardDescriptionsIdAssetGetWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsIdAssetGetWithHttpInfo(int id)
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v1/reward_descriptions/{id}/asset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdAssetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsIdAssetGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdAssetGetWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsIdAssetGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Object>("/api/v1/reward_descriptions/{id}/asset", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdAssetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsIdAssetPatch(int id, System.IO.Stream? file = default(System.IO.Stream?))
        {
            ApiV1RewardDescriptionsIdAssetPatchWithHttpInfo(id, file);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsIdAssetPatchWithHttpInfo(int id, System.IO.Stream? file = default(System.IO.Stream?))
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/reward_descriptions/{id}/asset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdAssetPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsIdAssetPatchAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdAssetPatchWithHttpInfoAsync(id, file, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsIdAssetPatchWithHttpInfoAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<Object>("/api/v1/reward_descriptions/{id}/asset", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdAssetPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        public CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO ApiV1RewardDescriptionsIdGet(int id)
        {
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> localVarResponse = ApiV1RewardDescriptionsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsIdGetWithHttpInfo(int id)
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>("/api/v1/reward_descriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO</returns>
        public async System.Threading.Tasks.Task<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> ApiV1RewardDescriptionsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdGetWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> localVarResponse = await task.ConfigureAwait(false);
#else
            CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO)</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>> ApiV1RewardDescriptionsIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO>("/api/v1/reward_descriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsIdImageGet(int id)
        {
            ApiV1RewardDescriptionsIdImageGetWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsIdImageGetWithHttpInfo(int id)
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v1/reward_descriptions/{id}/image", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdImageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsIdImageGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdImageGetWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsIdImageGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Object>("/api/v1/reward_descriptions/{id}/image", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdImageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsIdImagePatch(int id, System.IO.Stream? file = default(System.IO.Stream?))
        {
            ApiV1RewardDescriptionsIdImagePatchWithHttpInfo(id, file);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsIdImagePatchWithHttpInfo(int id, System.IO.Stream? file = default(System.IO.Stream?))
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/reward_descriptions/{id}/image", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdImagePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsIdImagePatchAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdImagePatchWithHttpInfoAsync(id, file, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsIdImagePatchWithHttpInfoAsync(int id, System.IO.Stream? file = default(System.IO.Stream?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (file != null)
            {
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<Object>("/api/v1/reward_descriptions/{id}/image", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdImagePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsIdPatch(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?))
        {
            ApiV1RewardDescriptionsIdPatchWithHttpInfo(id, competitiveBackendBackendUsageObjectsRewardDescriptionDTO);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsIdPatchWithHttpInfo(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CompetitiveFrontend.OpenAPIClient.Client.ApiException(400, "Missing required parameter 'id' when calling RewardDescriptionApi->ApiV1RewardDescriptionsIdPatch");

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = competitiveBackendBackendUsageObjectsRewardDescriptionDTO;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/v1/reward_descriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsIdPatchAsync(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsIdPatchWithHttpInfoAsync(id, competitiveBackendBackendUsageObjectsRewardDescriptionDTO, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsIdPatchWithHttpInfoAsync(string id, CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new CompetitiveFrontend.OpenAPIClient.Client.ApiException(400, "Missing required parameter 'id' when calling RewardDescriptionApi->ApiV1RewardDescriptionsIdPatch");


            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = competitiveBackendBackendUsageObjectsRewardDescriptionDTO;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<Object>("/api/v1/reward_descriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns></returns>
        public void ApiV1RewardDescriptionsPut(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?))
        {
            ApiV1RewardDescriptionsPutWithHttpInfo(competitiveBackendBackendUsageObjectsRewardDescriptionDTO);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object> ApiV1RewardDescriptionsPutWithHttpInfo(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?))
        {
            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = competitiveBackendBackendUsageObjectsRewardDescriptionDTO;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v1/reward_descriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RewardDescriptionsPutAsync(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = ApiV1RewardDescriptionsPutWithHttpInfoAsync(competitiveBackendBackendUsageObjectsRewardDescriptionDTO, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CompetitiveFrontend.OpenAPIClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="competitiveBackendBackendUsageObjectsRewardDescriptionDTO"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CompetitiveFrontend.OpenAPIClient.Client.ApiResponse<Object>> ApiV1RewardDescriptionsPutWithHttpInfoAsync(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO? competitiveBackendBackendUsageObjectsRewardDescriptionDTO = default(CompetitiveBackend.BackendUsage.Objects.RewardDescriptionDTO?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            CompetitiveFrontend.OpenAPIClient.Client.RequestOptions localVarRequestOptions = new CompetitiveFrontend.OpenAPIClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CompetitiveFrontend.OpenAPIClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = competitiveBackendBackendUsageObjectsRewardDescriptionDTO;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Bearer")))
            {
                localVarRequestOptions.HeaderParameters.Add("Bearer", this.Configuration.GetApiKeyWithPrefix("Bearer"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<Object>("/api/v1/reward_descriptions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1RewardDescriptionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
